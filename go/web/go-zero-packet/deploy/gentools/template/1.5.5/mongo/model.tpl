// Code generated by goctl. DO NOT EDIT.
package model

import (
    "context"
    "go.mongodb.org/mongo-driver/mongo/options"

    "github.com/zeromicro/go-zero/core/stores/mon"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/bson/primitive"
    "go.mongodb.org/mongo-driver/mongo"
)

type {{.lowerType}}Model interface{
    Insert(ctx context.Context,data *{{.Type}}) (*mongo.InsertOneResult, error)
    FindById(ctx context.Context,id interface{}) (*{{.Type}}, error)
    Update(ctx context.Context, filter, update any, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error)
    UpdateOne(ctx context.Context,data *{{.Type}}) (*mongo.UpdateResult, error)
    UpdateMap(ctx context.Context, filter, update map[string]interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error)
    Delete(ctx context.Context,id interface{}) (int64, error)
}

type default{{.Type}}Model struct {
    conn *mon.Model
}

func newDefault{{.Type}}Model(conn *mon.Model) *default{{.Type}}Model {
    return &default{{.Type}}Model{conn: conn}
}


func (m *default{{.Type}}Model) Insert(ctx context.Context, data *{{.Type}}) (*mongo.InsertOneResult, error) {
    insert, err := m.conn.InsertOne(ctx, data)
    return insert, err
}

func (m *default{{.Type}}Model) FindById(ctx context.Context, id interface{}) (*{{.Type}}, error) {
	var oid interface{}
	var err	error
	switch id.(type) {
	case primitive.ObjectID:
		oid = id
	case string:
		oid, err = primitive.ObjectIDFromHex(id.(string))
		if err != nil {
			return nil, ErrInvalidObjectId
		}
	default:
		oid = id
	}

    var data {{.Type}}
    err = m.conn.FindOne(ctx, &data, bson.M{"_id": oid})
    switch {
    case err == nil:
        return &data, nil
    case err == mon.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *default{{.Type}}Model) Update(ctx context.Context, filter, update any, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	return m.conn.UpdateMany(ctx, filter, update, opts...)
}

func (m *default{{.Type}}Model) UpdateOne(ctx context.Context, data *{{.Type}}) (*mongo.UpdateResult, error) {
    res, err := m.conn.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
    return res, err
}

func (m *default{{.Type}}Model) UpdateMap(ctx context.Context, filter, update map[string]interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	query := bson.D{}
	for key, value := range filter {
		query = append(query, bson.E{
			Key: key, Value: value,
		})
	}
	updater := bson.D{
		{Key: "$set", Value: update},
	}

	return m.conn.UpdateOne(ctx, query, updater, opts...)
}

func (m *default{{.Type}}Model) Delete(ctx context.Context, id interface{}) (int64, error) {
	var oid interface{}
	var err	error
	switch id.(type) {
	case primitive.ObjectID:
		oid = id
	case string:
		oid, err = primitive.ObjectIDFromHex(id.(string))
		if err != nil {
			return 0, ErrInvalidObjectId
		}
	default:
		oid = id
	}
    res, err := m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return res, err
}
