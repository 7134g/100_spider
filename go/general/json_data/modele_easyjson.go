// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package json_data

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson555c4f24DecodeTestFileJsonData(in *jlexer.Lexer, out *Teacher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "grade_info":
			(out.Grade).UnmarshalEasyJSON(in)
		case "student_info":
			if in.IsNull() {
				in.Skip()
				out.Student = nil
			} else {
				in.Delim('[')
				if out.Student == nil {
					if !in.IsDelim(']') {
						out.Student = make([]Student, 0, 1)
					} else {
						out.Student = []Student{}
					}
				} else {
					out.Student = (out.Student)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Student
					(v1).UnmarshalEasyJSON(in)
					out.Student = append(out.Student, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson555c4f24EncodeTestFileJsonData(out *jwriter.Writer, in Teacher) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"grade_info\":"
		out.RawString(prefix)
		(in.Grade).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"student_info\":"
		out.RawString(prefix)
		if in.Student == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Student {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Teacher) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson555c4f24EncodeTestFileJsonData(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Teacher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson555c4f24EncodeTestFileJsonData(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Teacher) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson555c4f24DecodeTestFileJsonData(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Teacher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson555c4f24DecodeTestFileJsonData(l, v)
}
func easyjson555c4f24DecodeTestFileJsonData1(in *jlexer.Lexer, out *Student) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "age":
			out.Age = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson555c4f24EncodeTestFileJsonData1(out *jwriter.Writer, in Student) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Student) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson555c4f24EncodeTestFileJsonData1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Student) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson555c4f24EncodeTestFileJsonData1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Student) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson555c4f24DecodeTestFileJsonData1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Student) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson555c4f24DecodeTestFileJsonData1(l, v)
}
func easyjson555c4f24DecodeTestFileJsonData2(in *jlexer.Lexer, out *Grade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "school_name":
			out.School = string(in.String())
		case "grade":
			out.Grade = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson555c4f24EncodeTestFileJsonData2(out *jwriter.Writer, in Grade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"school_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.School))
	}
	{
		const prefix string = ",\"grade\":"
		out.RawString(prefix)
		out.Int(int(in.Grade))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Grade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson555c4f24EncodeTestFileJsonData2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Grade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson555c4f24EncodeTestFileJsonData2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Grade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson555c4f24DecodeTestFileJsonData2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Grade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson555c4f24DecodeTestFileJsonData2(l, v)
}
